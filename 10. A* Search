def dfs(graph, start, end, path=[]):
    path = path + [start]
    if start == end:
        return path
    if start not in graph:
        return None
    for node in graph[start]:
        if node not in path:
            new_path = dfs(graph, node, end, path)
            if new_path:
                return new_path
    return None

def create_graph():
    graph = {}
    num_edges = int(input("Enter the number of edges: "))
    print("Enter the edges (format: source destination):")
    for _ in range(num_edges):
        source, destination = input().split()
        if source not in graph:
            graph[source] = []
        graph[source].append(destination)
    return graph

def format_dfs_traversal(path):
    return ' -> '.join(path)

graph = create_graph()
start_node = input("Enter the source vertex: ").strip()
end_node = input("Enter the destination vertex: ").strip()

path = dfs(graph, start_node, end_node)
if path:
    print("DFS traversal:", format_dfs_traversal(path))
else:
    print("No path found from {} to {}.".format(start_node, end_node))
